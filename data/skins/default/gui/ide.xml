<image id="ideoverlay"
       multiply="rgba{11,11,22,230}"
       absolute="true"
       width="100%"
       height="100%"
       visible="false"
       padding="50 5 5 5"
       controller="script"
       flow="column"
       ><![CDATA[
{
    var source = [];
    var ide = app.target;
    var doc = app.activeDocument;

    var actions = {
        copy:function() {
            app.copy(getSource());
        },

        paste:function() {
            var current = currentLine();
            var line = source.indexOf(current);
            var cursor = current.get("cursor-index")|0;

            var src = app.paste();
            if (typeof src != "string")
                return;

            var currentText = current.get("text");
            src = currentText.substr(0, cursor) + src + currentText.substr(cursor);

            src.split(/\r?\n/).forEach(function(src){
                if (!current) {
                    current = createLine(++line);
                    cursor = 0;
                }
                current.set("text", src);
                current = null;
            });
        },

        execute:function() {
            save();
            var image = app.activeCell.composite;
            try {
                eval(getSource());
            } catch (ex) {
                console.log("ERROR:" + ex);
            }
        },

        insertLine:function() {
            var current = currentLine();
            var line = createLine(source.indexOf(current) + 1);
            var cursor = current.get("cursor-index");
            var src = current.get("text");
            current.set("text", src.substr(0, cursor));
            line.set("text", src.substr(cursor),
                     "cursor-index", 0);
            line.focus();
        },

        delChar:function() {
            var current = currentLine();
            var currentIndex = source.indexOf(current);
            var prev = source[currentIndex - 1];
            if (!prev)
                return;
            prev.set("text", prev.get("text") + current.get("text"));
            source.splice(currentIndex, 1);
            current.remove();
        },

        forwardChar:function(){
            var focus = false;
            source.forEach(function(line){
                if (focus === false && line.hasFocus()) {
                    focus = line;
                } else if (focus) {
                    line.set("cursor-index", 0);
                    line.focus();
                    focus = null;
                }
            });
        },

        nextLine:function(){
            var focus = false;
            var pos;
            source.forEach(function(line){
                if (focus === false && line.hasFocus()) {
                    focus = line;
                } else if (focus) {
                    line.set("cursor-index", focus.get("cursor-index"));
                    line.focus();
                    focus = null;
                }
            });
        },

        backChar:function(){
            var focus = false;
            source.forEach(function(line){
                if (line.hasFocus()) {
                    if (focus) {
                        focus.set("cursor-index", ~0 >>> 0);
                        focus.focus();
                        focus = null;
                    }
                } else if (focus !== null) {
                    focus = line;
                }
            });
        },

        prevLine:function(){
            var focus = false;
            source.forEach(function(line){
                if (line.hasFocus()) {
                    if (focus) {
                        focus.set("cursor-index", line.get("cursor-index"));
                        focus.focus();
                        focus = null;
                    }
                } else if (focus !== null) {
                    focus = line;
                }
            });
        }
    };

    var events = {
        init:function(){
            for (var key in events) {
                ide.addEventListener(key);
            }
            setSource(config.get("ide.source") || app.parse("%appdata/scratchpad.js", "txt"));
            if (source[0])
                source[0].focus();
            var shortcuts = config.get("ide.shortcuts");
            shortcuts.keys().split("\n").forEach(function(key) {
                var value = shortcuts.get(key);
                if (typeof actions[value] == "function") {
                    events[key] = actions[value];
                } else {
                    console.log("Unknown IDE action [" + value + "] for shortcut [" + key + "]");
                }
            });
        },

        click:function() {
        },

        keydown:function(mouseX, mouseY, scancode, keycode, keyname){
            var args = [];
            for (var i = 5; i < arguments.length; ++i)
                args.push(arguments[i]);
            args.sort();
            args = args.join("+");
            for (var k in events) {
                k.split(",").forEach(function(p){
                    if (p.trim().split("+").sort().join("+") == args)
                        events[k]();
                });
            }
        }
    };

    function createLine(index) {
        var span = ide.createChild("span", index);
        span.apply("font", "%appdata/fonts/DejaVuSansMono.ttf",
                   "text-transform", "",
                   "controller", "input",
                   "color", "#77AACC",
                   "size", "16px",
                   "height", "16px",
                   "font-padding", "1 1 2 1");
        source.splice(index, 0, span);
        return span;
    }

    function save() {
        config.set("ide.source", getSource());
    }

    function currentLine() {
        var focus = false;
        source.forEach(function(line){
            if (focus === false && line.hasFocus()) {
                focus = line;
            }
        });
        return focus;
    }

    function getSource() {
        return source.map(function(r){return r.get("text");}).join("\n");
    }

    function setSource(raw){
        var lines = raw.split(/\r?\n/);
        while (source.length > lines.length)
            ide.removeChild(source.pop());
        while (source.length < lines.length)
            createLine(source.length);
        for (var i = 0; i < lines.length; ++i) {
            source[i].apply("text", lines[i]);
        }
    }

    function onEvent(event) {
        if (event in events) {
            var args = [];
            for (var i = 2; i < arguments.length; ++i)
                args.push(arguments[i]);
            events[event].apply(ide, args);
        }
    }
}
]]></image>
